var documenterSearchIndex = {"docs":
[{"location":"spline/#The-Spline-type-and-related-functions-1","page":"The Spline type","title":"The Spline type and related functions","text":"","category":"section"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"using BSplines","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"A spline consists of a B-spline basis and a coefficient vector of the same length. The Spline{B, C} type represents a spline with a basis of type B and a coefficient vector of type C. The constructor Spline(basis, coeffs) returns a spline with the given B-spline basis and coefficients. The basis on which the spline is defined can be obtained with the basis function. The coeffs function returns the coefficient vector of a spline.","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"b = BSplineBasis(4, 0:5);\nc = rand(length(b));\nspl = Spline(b, c)\nbasis(spl) === b\ncoeffs(spl) === c","category":"page"},{"location":"spline/#Evaluating-Splines-and-their-derivatives-1","page":"The Spline type","title":"Evaluating Splines and their derivatives","text":"","category":"section"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"To evaluate a Spline, it can be called as a function. Alternatively, the splinevalue function can be used:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"spl = Spline(BSplineBasis(4, 0:5), rand(8));\nspl(2.5)\nsplinevalue(spl, 2.5)","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"To evaluate derivatives of a spline, the optional Derivative(N) argument is used:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"spl(2.5, Derivative(1))\nsplinevalue(spl, 2.5, Derivative(2))","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"info: Info\nThe AllDerivatives{N} type is not supported as an argument.","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"Evaluating a spline at a point x requires finding the largest index i such that t[i] ≤ x and t[i] < t[end] where t is the knot vector of the basis. If the index is already known, it can be specified with the leftknot keyword argument to speed up the computation.","category":"page"},{"location":"spline/#Arithmetic-with-Splines-1","page":"The Spline type","title":"Arithmetic with Splines","text":"","category":"section"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"A Spline can be multiplied or divided by a real number using *, /, or \\. These operations return a new spline:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"spl = Spline(BSplineBasis(3, 0:5), [1:7;])\n3.0 * spl\nspl / 4\n4 \\ spl == ans","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"Using the lmul!/rmul! and ldiv!/rdiv! functions from the LinearAlgebra stdlib, a Spline can be multiplied/divided by a real number in-place, which modifies the spline (if its coefficient vector is mutable):","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"using LinearAlgebra: rmul!\nspl = Spline(BSplineBasis(3, 0:5), [1:7;])\nrmul!(spl, 3);\nspl","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"If two splines are defined on the same basis, they can be added and subtracted from each other using + and -:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"spl1 = Spline(BSplineBasis(3, 0:5), [1:7;]);\nspl2 = Spline(BSplineBasis(3, 0:5), [2:8;]);\nspl1 + spl2\nspl1 - spl2","category":"page"},{"location":"spline/#The-BSpline-type-1","page":"The Spline type","title":"The BSpline type","text":"","category":"section"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"Indexing into or iterating over a B-spline basis yields BSplines. The parametric type BSpline{T} represents a single B-spline from a B-spline basis of type T:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"b = BSplineBasis(4, 0:5);\nb[3]","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"note: Note\nActually, a BSpline is just a Spline with a coefficient vector of a special type, i.e., BSpline{T} is an alias for Spline{T,BSplines.StandardBasisVector{Bool}}.","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"BSplines can be used like any other Spline. However, they behave differently in two ways:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"BSplines are printed differently: instead of the coefficient vector, its index within the basis is shown.\nCalling support on a BSpline yields its actual support (the interval on which it is non-zero) instead of the support of the basis.","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"The second point is illustrated by the following example: even though spl and bspl compare equal, their support differs:","category":"page"},{"location":"spline/#","page":"The Spline type","title":"The Spline type","text":"spl = Spline(b, [0,0,1,0,0,0,0,0])\nbspl = b[3]\nspl == bspl\nsupport(spl) # support of the basis\nsupport(bspl) # actual support of the B-spline","category":"page"},{"location":"functions/#Higher-level-functions-1","page":"Higher-level functions","title":"Higher-level functions","text":"","category":"section"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"The functions listed below help with common use cases of B-splines. See their docstrings for more information.","category":"page"},{"location":"functions/#knotaverages/knotaverages!-1","page":"Higher-level functions","title":"knotaverages/knotaverages!","text":"","category":"section"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"The knotaverages function returns a vector tau of knot averages","category":"page"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"tau_i = frac1k-1 sum_j=i+1^i+k-1 t_j","category":"page"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"where t is the knot vector of the B-spline basis and k is its order. The length of tau equals the number of B-splines in the basis. The knot averages are recommended in [deBoor1978] (p. 214) as data points for interpolation. Instead of creating the knot vector for all indices i, a range of indices can be supplied with the keyword argument indices.","category":"page"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"The knotaverages! function can be used to write the knot averages to a pre-allocated array.","category":"page"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"[deBoor1978]: Carl de Boor, A Practical Guide to Splines, New York, N.Y.: Springer, 1978.","category":"page"},{"location":"functions/#averagebasis-1","page":"Higher-level functions","title":"averagebasis","text":"","category":"section"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"The averagebasis function returns a BSplineBasis of a specified order that is well-suited for interpolating a function at a given set of data points.","category":"page"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"warning: Warning\nTo obtain a valid B-spline basis, the data points must be sorted in ascending order. This is not checked by the averagebasis function.","category":"page"},{"location":"functions/#interpolate-1","page":"Higher-level functions","title":"interpolate","text":"","category":"section"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"The interpolate function interpolates data (vectors of x and y values) in a given B-spline basis. It returns a Spline. The indices keyword can be used to restrict the interpolation to a range of B-splines from the basis.","category":"page"},{"location":"functions/#approximate-1","page":"Higher-level functions","title":"approximate","text":"","category":"section"},{"location":"functions/#","page":"Higher-level functions","title":"Higher-level functions","text":"The approximate function approximates a function fmathbbRtomathbbR in a given B-spline basis by sampling the function at the knot averages of the basis and interpolating the samples. The indices keyword can be used to restrict the B-splines used for the interpolation.","category":"page"},{"location":"api/#API-documentation-1","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"api/#Types-and-constructors-1","page":"API documentation","title":"Types and constructors","text":"","category":"section"},{"location":"api/#","page":"API documentation","title":"API documentation","text":"AllDerivatives\nAllDerivatives(::Integer)\nBSpline\nBSpline{B}(::B, ::Integer) where B<:BSplineBasis\nBSplineBasis\nBSplineBasis(::Any, ::Any)\nDerivative\nDerivative(::Integer)\nSpline\nSpline(::Any, ::Any)\nFunction","category":"page"},{"location":"api/#BSplines.AllDerivatives","page":"API documentation","title":"BSplines.AllDerivatives","text":"AllDerivatives{N}\n\nA singleton type that represents all m-th derivatives where 0 ≤ m < N.\n\n\n\n\n\n","category":"type"},{"location":"api/#BSplines.AllDerivatives-Tuple{Integer}","page":"API documentation","title":"BSplines.AllDerivatives","text":"AllDerivatives(N)\n\nA shortcut for AllDerivatives{N}(), representing all m-th derivatives where 0 ≤ m < N.\n\n\n\n\n\n","category":"method"},{"location":"api/#BSplines.BSpline","page":"API documentation","title":"BSplines.BSpline","text":"BSpline{B} <: Spline{B}\n\nType for a B-spline from a B-spline basis of type B. BSplines can be obtained by indexing into a B-spline basis.\n\n\n\n\n\n","category":"type"},{"location":"api/#BSplines.BSpline-Union{Tuple{B}, Tuple{B,Integer}} where B<:BSplineBasis","page":"API documentation","title":"BSplines.BSpline","text":"BSpline(basis::BSplineBasis, index)\n\nReturn the index-th B-spline of basis.\n\nExample\n\njulia> basis = BSplineBasis(5, 1:10);\n\njulia> BSpline(basis, 3)\nBSpline{BSplineBasis{UnitRange{Int64}}}:\n basis: 13-element BSplineBasis{UnitRange{Int64}}:\n  order: 5\n  breakpoints: 1:10\n index: 3 (knots: [1, 1, 1, 2, 3, 4])\n\n\n\n\n\n","category":"method"},{"location":"api/#BSplines.BSplineBasis","page":"API documentation","title":"BSplines.BSplineBasis","text":"BSplineBasis{T<:AbstractVector{<:Real}}\n\nType for a B-spline basis with breakpoint vector of type T.\n\nHere, a B-spline basis is completely specified by its order k and breakpoint sequence. The knot sequence is derived from the breakpoint sequence by duplicating the first and last breakpoints so they each appear k times. Knot sequences where the first and last breakpoints do not appear k times are not supported by this data type.\n\n\n\n\n\n","category":"type"},{"location":"api/#BSplines.BSplineBasis-Tuple{Any,Any}","page":"API documentation","title":"BSplines.BSplineBasis","text":"BSplineBasis(order, breakpoints)\n\nCreate a B-spline basis with order order and breakpoint vector breakpoints. The breakpoint vector is assumed to be sorted.\n\n\n\n\n\n","category":"method"},{"location":"api/#BSplines.Derivative","page":"API documentation","title":"BSplines.Derivative","text":"Derivative{N}\n\nA singleton type that represents the N-th derivative.\n\n\n\n\n\n","category":"type"},{"location":"api/#BSplines.Derivative-Tuple{Integer}","page":"API documentation","title":"BSplines.Derivative","text":"Derivative(N)\n\nA shortcut for Derivative{N}(), representing the N-th derivative.\n\n\n\n\n\n","category":"method"},{"location":"api/#BSplines.Spline","page":"API documentation","title":"BSplines.Spline","text":"Spline{B<:BSplineBasis, C<:AbstractVector{<:Real}}\n\nType for a spline based on a B-spline basis of type B and coefficient vector of type C.\n\n\n\n\n\n","category":"type"},{"location":"api/#BSplines.Spline-Tuple{Any,Any}","page":"API documentation","title":"BSplines.Spline","text":"Spline(basis, coeffs)\n\nCreate a spline from a B-spline basis and a vector of coefficients.\n\n\n\n\n\n","category":"method"},{"location":"api/#Core.Function","page":"API documentation","title":"Core.Function","text":"Function(spline::Spline, [deriv::Derivative], [onlysupport=true])\n\nWrap spline in an object that is a subtype of Function. Calling the returned function with a single argument x will evaluate the spline (or one of its derivatives as specified by deriv) at x.\n\nIf the optional argument onlysupport is set to true (the default), the returned function will return NaN if evaluated outside of the support of spline. If onlysupport is set to false, it will return zero there (as does calling the spline directly).\n\nNote that a Spline can be called without wrapping them as described here, although they are not a subtype of Function. Wrapping a spline in a Function object is mainly intended to aid in plotting, which is the rationale behind the onlysupport=true default: when using Plots.jl, this will cause the spline to not be drawn outside of its support.\n\nExamples\n\njulia> spline = approximate(sin, BSplineBasis(5, 0:5)); # create a Spline\n\njulia> f = Function(spline, false); # f is zero outside of the interval [0,5]\n\njulia> g = Function(spline, Derivative(1)); # g is NaN outside of the interval [0,5]\n\njulia> f(1.5) == spline(1.5)\ntrue\n\njulia> g(1.5) == spline(1.5, Derivative(1))\ntrue\n\njulia> f(-1), g(-1)\n(0.0, NaN)\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions-1","page":"API documentation","title":"Functions","text":"","category":"section"},{"location":"api/#","page":"API documentation","title":"API documentation","text":"approximate\naveragebasis\nbasis\nbreakpoints\nbsplines!\nbsplines\ncoeffs\ninterpolate\nintervalindex\nintervalindices\nknotaverages!\nknotaverages\nknots\norder\nsplinevalue\nsupport","category":"page"},{"location":"api/#BSplines.approximate","page":"API documentation","title":"BSplines.approximate","text":"approximate(f, basis::BSplineBasis; indices=eachindex(basis)) -> Spline\n\nApproximate the function f in the B-spline basis basis. If indices is supplied, only the basis functions at the given indices of basis are used.\n\nThe approximation is calculated by interpolating samples of f at the knotaverages of the basis.\n\nSee also: interpolate\n\nExamples\n\njulia> basis = BSplineBasis(5, 0:5);\n\njulia> spl = approximate(sin, basis, indices=2:length(basis))\nSpline{BSplineBasis{UnitRange{Int64}},Array{Float64,1}}:\n basis: 9-element BSplineBasis{UnitRange{Int64}}:\n  order: 5\n  breakpoints: 0:5\n coeffs: [0.0, 0.24963094468700395, 0.7525104872191076, 1.229735980709192, 0.7385208497317045, -0.4328168377896504, -1.0125409246826416, -1.029692234224304, -0.9589242746631385]\n\njulia> spl(π/4)\n0.7071028397621081\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.averagebasis","page":"API documentation","title":"BSplines.averagebasis","text":"averagebasis(order, datapoints) -> BSplineBasis\n\nReturns a B-spline basis with the specified order that is well-suited for interpolation on the given datapoints. The datapoints vector is assumed to be sorted.\n\nThe calculated breakpoints are described in [deBoor1978], p. 219, as a “reasonable alternative” to the optimal breakpoint sequence since they are “often very close to the optimum” and are computationally inexpensive.\n\n[deBoor1978]: Carl de Boor, A Practical Guide to Splines, New York, N.Y.: Springer, 1978.\n\nExamples\n\njulia> averagebasis(5, 0:10)\n11-element BSplineBasis{Array{Float64,1}}:\n order: 5\n breakpoints: [0.0, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 10.0]\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.basis","page":"API documentation","title":"BSplines.basis","text":"basis(spline::Spline)\n\nReturn the B-spline basis on which the spline is defined.\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.breakpoints","page":"API documentation","title":"BSplines.breakpoints","text":"breakpoints(basis::BSplineBasis)\n\nReturn the breakpoint sequence of the B-spline basis.\n\nExamples\n\njulia> breakpoints(BSplineBasis(3, 0:5))\n0:5\n\njulia> breakpoints(BSplineBasis(4, [1.0, 1.5, 2.5, 4.0]))\n4-element Array{Float64,1}:\n 1.0\n 1.5\n 2.5\n 4.0\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.bsplines!","page":"API documentation","title":"BSplines.bsplines!","text":"bsplines!(dest, basis, x; leftknot=intervalindex(basis, x)) -> offset\n\nCalculate the values of all B-splines of basis that are non-zero at x and store the result in dest. The destination vector dest must have the length order(basis).\n\nIf any B-splines are non-zero at x, an integer offset is returned and the value of the i-th B-spline is written to dest[i-offset]. If no B-splines are non-zero at x, nothing is returned and dest is not mutated.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nExamples\n\njulia> dest = zeros(4);\n\njulia> bsplines!(dest, BSplineBasis(4, 0:5), 2.4)\n2\n\njulia> dest # dest[i] contains value of (i+2)-th B-spline\n4-element Array{Float64,1}:\n 0.03600000000000002\n 0.5386666666666667 \n 0.41466666666666663\n 0.01066666666666666\n\n\n\n\n\nbsplines!(dest, basis, x, ::Derivative{N}; leftknot=intervalindex(basis, x))\n\nCalculate the values of all B-splines of basis that are non-zero at x and store the result in dest. The destination vector dest must have the length order(basis).\n\nIf any B-splines are non-zero at x, an integer offset is returned and the N-th derivative of the i-th B-spline is written to dest[i-offset]. If no B-splines are non-zero at x, nothing is returned and dest is not mutated.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nExamples\n\njulia> dest = zeros(4);\n\njulia> bsplines!(dest, BSplineBasis(4, 0:5), 7.0, Derivative(2)) # returns nothing\n\njulia> bsplines!(dest, BSplineBasis(4, 0:5), 4.2, Derivative(2))\n4\n\njulia> dest # dest[i] contains 2nd derivative of (i+4)-th B-spline\n4-element Array{Float64,1}:\n  0.7999999999999998\n -1.399999999999999 \n -0.6000000000000019\n  1.200000000000001 \n\n\n\n\n\nbsplines!(dest, basis, x, ::AllDerivatives{N}; leftknot=intervalindex(basis, x))\n\nCalculate the values of all B-splines of basis that are non-zero at x and store the result in dest. The destination matrix dest must have the dimensions order(basis)×N.\n\nIf any B-splines are non-zero at x, an integer offset is returned and the m-th derivative of the i-th B-spline is written to dest[i-offset, m+1]. If no B-splines are non-zero at x, nothing is returned and dest is not mutated.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nExamples\n\njulia> dest = zeros(4, 3);\n\njulia> bsplines!(dest, BSplineBasis(4, 0:5), -1.0, AllDerivatives(3)) # returns nothing\n\njulia> bsplines!(dest, BSplineBasis(4, 0:5), 3.75, AllDerivatives(3))\n3\n\njulia> dest # dest[i,m] contains (m-1)-th derivative of (i+3)-th B-spline\n4×3 Array{Float64,2}:\n 0.00260417  -0.03125    0.25 \n 0.315104    -0.65625    0.25 \n 0.576823     0.265625  -1.625\n 0.105469     0.421875   1.125\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.bsplines","page":"API documentation","title":"BSplines.bsplines","text":"bsplines(basis, x; leftknot=intervalindex(basis, x))\n\nCalculate the values of all non-zero B-splines of basis at x.\n\nIf any B-splines are non-zero at x, an OffsetVector is returned that contains the value of the i-th B-spline at the index i. If no B-splines are non-zero at x, nothing is returned.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nExamples\n\njulia> bsplines(BSplineBasis(4, 0:5), 2.4)\n4-element OffsetArray(::Array{Float64,1}, 3:6) with eltype Float64 with indices 3:6:\n 0.03600000000000002\n 0.5386666666666667 \n 0.41466666666666663\n 0.01066666666666666\n\njulia> bsplines(BSplineBasis(4, 0:5), 6) # returns nothing\n\njulia> bsplines(BSplineBasis(3, 0:5), 17//5, leftknot=6)\n3-element OffsetArray(::Array{Rational{Int64},1}, 4:6) with eltype Rational{Int64} with indices 4:6:\n  9//50\n 37//50\n  2//25\n\n\n\n\n\nbsplines(basis, x, ::Derivative{N}; leftknot=intervalindex(basis, x))\n\nCalculate the N-th derivatives of all B-splines of basis that are non-zero at x.\n\nIf any B-splines are non-zero at x, an OffsetVector is returned that contains the N-th derivative of the i-th B-spline at the index i. If no B-splines are non-zero at x, nothing is returned.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nExamples\n\njulia> bsplines(BSplineBasis(3, 0:5), 2.4, Derivative(1))\n3-element OffsetArray(::Array{Float64,1}, 3:5) with eltype Float64 with indices 3:5:\n -0.6000000000000001 \n  0.20000000000000018\n  0.3999999999999999 \n\njulia> bsplines(BSplineBasis(3, 0:5), 6, Derivative(1)) # returns nothing\n\njulia> bsplines(BSplineBasis(4, 0:5), 17//5, Derivative(2), leftknot=7)\n4-element OffsetArray(::Array{Rational{Int64},1}, 4:7) with eltype Rational{Int64} with indices 4:7:\n  3//5\n -4//5\n -2//5\n  3//5\n\n\n\n\n\nbsplines(basis, x, ::AllDerivatives{N}; leftknot=intervalindex(basis, x))\n\nCalculate all m-th derivatives (0 ≤ m < N) of all B-splines of basis that are non-zero at x.\n\nIf any B-splines are non-zero at x, an OffsetMatrix is returned that contains the m-th derivative of the i-th B-spline at the index i, m. If no B-splines are non-zero at x, nothing is returned.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nExamples\n\njulia> bsplines(BSplineBasis(3, 0:5), 2.4, AllDerivatives(3))\n3×3 OffsetArray(::Array{Float64,2}, 3:5, 0:2) with eltype Float64 with indices 3:5×0:2:\n 0.18  -0.6   1.0\n 0.74   0.2  -2.0\n 0.08   0.4   1.0\n\njulia> bsplines(BSplineBasis(3, 0:5), 6.0, AllDerivatives(3)) # returns nothing\n\njulia> bsplines(BSplineBasis(4, 0:5), 17//5, AllDerivatives(4), leftknot=7)\n4×4 OffsetArray(::Array{Rational{Int64},2}, 4:7, 0:3) with eltype Rational{Int64} with indices 4:7×0:3:\n   9//250   -9//50   3//5  -1//1\n 202//375  -14//25  -4//5   3//1\n 307//750   31//50  -2//5  -7//2\n   2//125    3//25   3//5   3//2\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.coeffs","page":"API documentation","title":"BSplines.coeffs","text":"coeffs(spline::Spline)\n\nReturn the coefficient vector of spline.\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.interpolate","page":"API documentation","title":"BSplines.interpolate","text":"interpolate(basis::BSplineBasis, xvalues, yvalues; indices=eachindex(basis)) -> Spline\n\nInterpolate the data given by xvalues and yvalues in the B-spline basis basis. If indices is supplied, only the basis functions at the given indices of basis are used.\n\nThe spline interpolation is calculated by creating the matrix B = [basis[i](x) for x=xvalues, i=indices] and then calculating B\\yvalues.\n\nSee also: approximate\n\nExamples\n\njulia> basis = BSplineBasis(5, 1:10);\n\njulia> xs = range(1, stop=10, length=length(basis)); ys = log.(xs);\n\njulia> spl = interpolate(basis, xs, ys)\nSpline{BSplineBasis{UnitRange{Int64}},Array{Float64,1}}:\n basis: 13-element BSplineBasis{UnitRange{Int64}}:\n  order: 5\n  breakpoints: 1:10\n coeffs: [0.0, 0.2480193113006778, 0.5968722382485209, 0.9466707785821219, 1.2689430722820556, 1.5140484163988175, 1.7114875128056504, 1.8766572742486973, 2.0185639127626325, 2.1429230073972407, 2.2259183994808813, 2.2775846911059, 2.302585092994046]\n\njulia> spl(float(ℯ))\n0.9999766059171411\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.intervalindex","page":"API documentation","title":"BSplines.intervalindex","text":"intervalindex(vec, x[, start])\n\nIf v is an AbstractVector, return the largest index i so that vec[i] ≤ x and vec[i] < vec[end]. Return nothing if x < first(vec) or x > last(vec) or isnan(x). The vector vec is assumed to be sorted in ascending order.\n\nIf vec is a BSplineBasis, return intervalindex(knots(vec), x[, start]).\n\nIf start is given, a linear search is performed, starting from the index start going forward or backward. If start is not given, a binary search is performed.\n\nExamples\n\njulia> intervalindex([1,1,2,3,4,4,4,5,6,6], 2.5)\n3\n\njulia> intervalindex([1,1,2,3,4,4,4,5,6,6], 7) # returns nothing\n\njulia> intervalindex([1,1,2,3,4,4,4,5,6,6], 1)\n2\n\njulia> intervalindex([1,1,2,3,4,4,4,5,6,6], 4)\n7\n\njulia> intervalindex([1,1,2,3,4,4,4,5,6,6], 6.0)\n8\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.intervalindices","page":"API documentation","title":"BSplines.intervalindices","text":"intervalindices(basis::BSplineBasis, indices=eachindex(basis))\n\nReturn an iterator that yields the indices of all intervals on which basis is defined, i.e., it produces all indices ind (in ascending order) for which (knots(basis)[ind], knots(basis)[ind+1]) is such an interval. \n\nIf a range of indices is supplied, the iterator yields only those intervals on which at least one of the B-splines basis[j] for j=indices is non-zero.\n\nExamples\n\njulia> intervalindices(BSplineBasis(3, 0:5))\n3:7\n\njulia> intervalindices(BSplineBasis(3, 0:5), 1:4)\n3:6\n\njulia> intervalindices(BSplineBasis(4, [1,2,3,4,4,4,5,6]))\nBSplines.IntervalIndices{Array{Int64,1}}([1, 2, 3, 4, 4, 4, 5, 6], 1:8, 3)\n\njulia> collect(ans)\n5-element Array{Int64,1}:\n  4\n  5\n  6\n  9\n 10\n\n\n\n\n\nintervalindices(basis::BSplineBasis, i, j, ...)\n\nFor integers i, j, …, return an iterator that yields the indices of all intervals on which all of the B-splines basis[i], basis[j], … are non-zero, i.e., it produces all indices ind (in ascending order) for which (knots(basis)[ind], knots(basis)[ind+1]) is such an interval.\n\nExamples\n\njulia> intervalindices(BSplineBasis(3, 0:5), 3)\n3:5\n\njulia> intervalindices(BSplineBasis(3, 0:5), 4, 5)\n5:6\n\njulia> intervalindices(BSplineBasis(3, 0:5), 2, 6) # B-splines do not overlap\n6:5\n\njulia> intervalindices(BSplineBasis(3, 0:5), 3, 5, 4)\n5:5\n\njulia> intervalindices(BSplineBasis(4, [1,2,3,4,4,4,5,6]), 3, 5)\nBSplines.IntervalIndices{Array{Int64,1}}([1, 2, 3, 4, 4, 4, 5, 6], 2:4, 3)\n\njulia> collect(ans)\n2-element Array{Int64,1}:\n 5\n 6\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.knotaverages!","page":"API documentation","title":"BSplines.knotaverages!","text":"knotaverages!(dest, basis::BSplineBasis; indices=eachindex(basis))\n\nCalculate the knot averages τ[i] = mean(knots[i+1:i+order-1]) for i ∈ indices and the knots and order of basis and store the result in dest. The knot averages are recommended in [deBoor1978] (p. 214) as data points for interpolation.\n\nSee also: knotaverages\n\n[deBoor1978]: Carl de Boor, A Practical Guide to Splines, New York, N.Y.: Springer, 1978.\n\nExamples\n\njulia> dest = Vector{Float64}(undef, 7);\n\njulia> knotaverages!(dest, BSplineBasis(3, 0:5))\n7-element Array{Float64,1}:\n 0.0\n 0.5\n 1.5\n 2.5\n 3.5\n 4.5\n 5.0\n\njulia> dest = Vector{Rational{Int}}(undef, 5);\n\njulia> knotaverages!(dest, BSplineBasis(3, 0:5), indices=2:6)\n5-element Array{Rational{Int64},1}:\n 1//2\n 3//2\n 5//2\n 7//2\n 9//2\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.knotaverages","page":"API documentation","title":"BSplines.knotaverages","text":"knotaverages(basis::BSplineBasis; indices=eachindex(basis))\n\nReturn the knot averages τ[i] = mean(knots[i+1:i+order-1]) for i ∈ indices and the knots and order of basis. The knot averages are recommended in [deBoor1978] (p. 214) as data points for interpolation.\n\nSee also: knotaverages!\n\n[deBoor1978]: Carl de Boor, A Practical Guide to Splines, New York, N.Y.: Springer, 1978.\n\nExamples\n\njulia> knotaverages(BSplineBasis(3, 0:5))\n7-element Array{Float64,1}:\n 0.0\n 0.5\n 1.5\n 2.5\n 3.5\n 4.5\n 5.0\n\njulia> knotaverages(BSplineBasis(4, [1, 3//2, 5//2, 4]), indices=2:6)\n5-element Array{Rational{Int64},1}:\n 7//6\n 5//3\n 8//3\n 7//2\n 4//1\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.knots","page":"API documentation","title":"BSplines.knots","text":"knots(basis::BSplineBasis)\n\nReturn the knot sequence of the B-spline basis.\n\nThe knot sequence is the breakpoint sequence except that the first and last values are duplicated so they appear order(basis) times.\n\nExamples\n\njulia> knots(BSplineBasis(3, 0:5))\n10-element BSplines.KnotVector{Int64,UnitRange{Int64}}:\n 0\n 0\n 0\n 1\n 2\n 3\n 4\n 5\n 5\n 5\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.order","page":"API documentation","title":"BSplines.order","text":"order(spline::Spline)\norder(basis::BSplineBasis)\n\nReturn the order of a spline or a B-spline basis.\n\nExamples\n\njulia> order(BSplineBasis(3, 0:5))\n3\n\njulia> order(BSplineBasis(4, [1.0, 1.5, 2.5, 4.0]))\n4\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.splinevalue","page":"API documentation","title":"BSplines.splinevalue","text":"splinevalue(spline::Spline, x; leftknot=intervalindex(basis(spline), x))\n\nCalculate the values of spline at x.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nInstead of calling splinevalue, a spline object can be called directly: spline(x; [leftknot]) is equivalent to splinevalue(spline, x; [leftknot]).\n\nExamples\n\njulia> spl = Spline(BSplineBasis(4, 0:5), 1:8);\n\njulia> splinevalue(spl, 1.7)\n3.69775\n\njulia> splinevalue(spl, 3.6, leftknot=7)\n5.618\n\njulia> spl(18//5)\n2809//500\n\njulia> spl(5, leftknot=8)\n8.0\n\n\n\n\n\nsplinevalue(spline::Spline, x, ::Derivative{N}; leftknot=intervalindex(basis(spline), x))\n\nCalculate the value of the N-th derivative of spline at x.\n\nIf the index of the relevant interval is already known, it can be supplied with the optional leftknot keyword to speed up the calculation.\n\nInstead of calling splinevalue, a spline object can be called directly: spline(x, Derivative(N); [leftknot]) is equivalent to splinevalue(spline, x, Derivative(N); [leftknot]).\n\nExamples\n\njulia> spl = Spline(BSplineBasis(4, 0:5), 1:8);\n\njulia> splinevalue(spl, 1.7, Derivative(1))\n1.0225\n\njulia> splinevalue(spl, 18//5, Derivative(2), leftknot=7)\n3//10\n\njulia> spl(3.6, Derivative(3))\n0.5\n\njulia> spl(5, Derivative(1))\n3.0\n\n\n\n\n\n","category":"function"},{"location":"api/#BSplines.support","page":"API documentation","title":"BSplines.support","text":"support(basis::BSplineBasis) -> a, b\n\nReturn the interval ab on which the B-spline basis is defined, i.e., a is the first and b the last breakpoint of the basis.\n\nExamples\n\njulia> support(BSplineBasis(3, 0:5))\n(0, 5)\n\njulia> support(BSplineBasis(4, [1.0, 1.5, 2.5, 4.0]))\n(1.0, 4.0)\n\n\n\n\n\nsupport(spline::Spline) -> a, b\n\nIf spline is a BSpline, return the interval ab on which the B-spline is non-zero. Otherwise, return support(basis(spline)).\n\nExamples\n\njulia> basis = BSplineBasis(3, 0:5);\n\njulia> spline = Spline(basis, ones(7));\n\njulia> zerospline = Spline(basis, zeros(7));\n\njulia> support(spline)\n(0, 5)\n\njulia> support(zerospline) # even though the spline is zero everywhere\n(0, 5)\n\njulia> support(basis[4]) # for BSplines, return their actual support\n(1, 4)\n\n\n\n\n\n","category":"function"},{"location":"basis/#The-BSplineBasis-type-and-related-functions-1","page":"The BSplineBasis type","title":"The BSplineBasis type and related functions","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"using BSplines","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"To work with B-spline bases, this package defines the parametric BSplineBasis{T} type which represents B-spline bases with breakpoint vector of type T.","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"A B-spline basis is completely characterized by its order k and knot vector t. In the case of the BSplineBasis type, the knot vector of a basis is generated from its breakpoint vector by repeating the first and last breakpoints so that they appear k times.","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"note: Note\nKnot sequences where the first and last knot do not appear k times are not supported by the BSplineBasis type. The reason for this is that it simplifies the evaluation of B-splines, since it means that exactly k B-splines are non-zero on each interval. If the first or last knot would appear less than k times, this would not be the case.","category":"page"},{"location":"basis/#Properties-of-B-spline-bases-–-order,-breakpoints,-and-knots-1","page":"The BSplineBasis type","title":"Properties of B-spline bases – order, breakpoints, and knots","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"A BSplineBasis is constructed from its order and breakpoint vector. The order and breakpoints functions return these properties. The length function returns the number of B-splines in the basis:","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"basis = BSplineBasis(4, 0:5)\norder(basis)\nbreakpoints(basis)\nlength(basis)","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"warning: Warning\nTo obtain a valid B-spline basis, the breakpoint vector must be sorted in ascending order. This is not checked by the BSplineBasis constructor.","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The knots function returns the knot vector that is generated from the breakpoints. In order to not allocate memory for a new array, a wrapper type around the original breakpoint vector is used:","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"knots(basis)","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The interval over which a BSplineBasis is defined (i.e., the interval between the first and the last breakpoint) can be obtained (as a Tuple) with the support function:","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"support(basis)","category":"page"},{"location":"basis/#Evaluating-B-Splines-and-their-derivatives-1","page":"The BSplineBasis type","title":"Evaluating B-Splines and their derivatives","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The bsplines and bsplines! functions can be used to obtain the values (or derivatives) of all B-splines that are non-zero at a given point.","category":"page"},{"location":"basis/#Evaluating-B-splines-1","page":"The BSplineBasis type","title":"Evaluating B-splines","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"If x is within the support of the B-spline basis, bsplines(basis, x) returns an OffsetArray which contains the value of the i-th B-spline at the index i. The array always has the length order(basis):","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"basis = BSplineBasis(4, 0:5);\nbsplines(basis, 3.2)\nbsplines(basis, 7//3)","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The type of the elements of the array depends on the type of the breakpoints and the type of x. If the point x is outside of the support of basis, nothing is returned instead:","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"bsplines(basis, 6) # returns `nothing`, which is not printed in the REPL","category":"page"},{"location":"basis/#Evaluating-derivatives-1","page":"The BSplineBasis type","title":"Evaluating derivatives","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The bsplines function can also calculate derivatives of the B-splines. The N-th derivative is specified via an optional third argument of the singleton type Derivative{N}. Instead of Derivative{N}(), the shorter constructor Derivative(N) can be used:","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"basis = BSplineBasis(4, 0:5);\nbsplines(basis, 7//3, Derivative(1)) # calculate first derivatives of non-zero B-splines","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"To calculate the value of the non-zero B-splines as well as all of their derivatives up to the N-1-th, the AllDerivatives{N} singleton type can be used instead. AllDerivatives(N) is equivalent to AllDerivatives{N}(). If x is within the support of the B-spline basis, bsplines(basis, x, AllDerivatives(N)) returns an OffsetArray which contains the j-th derivative of the i-th B-spline at the index i, j (the zeroth derivative is the value itself):","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"bsplines(basis, 4, AllDerivatives(3)) # calculate zeroth, first and second derivatives","category":"page"},{"location":"basis/#Pre-allocating-output-arrays-1","page":"The BSplineBasis type","title":"Pre-allocating output arrays","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The bsplines function allocates a new array to return the values (except when it returns nothing). In order to write the values to a pre-allocated array instead, the bsplines! function can be used.","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"The bsplines! function returns an integer offset such that the i-th element of the destination array contains the value (or derivative) of the i+offset-th B-spline. In the case of AllDerivatives{N}, the destination array contains the j-1-th derivative of the i+offset-th B-spline at the index i, j. If the point x is outside of the support of the basis, nothing is returned instead and the destination array is not mutated.","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"basis = BSplineBasis(4, 0:5);\nvec = zeros(4);\nbsplines!(vec, basis, 3.2)\nvec\nbsplines!(vec, basis, 7//3, Derivative(2))\nvec\nmat = zeros(Rational{Int}, 4, 2);\nbsplines!(mat, basis, 4, AllDerivatives(2))\nmat","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"When only calculating B-splines or their derivatives via Derivative{N}, the destination array must be of length order(basis). In the case of the AllDerivatives{N} argument, the destination array must be an order(basis) × N matrix. In any case, the destination array must not have offset axes.","category":"page"},{"location":"basis/#Specifying-the-relevant-interval-1","page":"The BSplineBasis type","title":"Specifying the relevant interval","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"Evaluating B-splines at a point x requires finding the largest index i such that t[i] ≤ x and t[i] < t[end] where t is the knot vector. The bsplines and bsplines! functions use the intervalindex function to find this index. If the index is already known, it can be specified with the leftknot keyword argument to bsplines/bsplines! in order to speed up the computation.","category":"page"},{"location":"basis/#Constructing-knot-vectors-1","page":"The BSplineBasis type","title":"Constructing knot vectors","text":"","category":"section"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"As stated above, the knots of a BSplineBasis are generated from its breakpoints by repeating the first and last breakpoints so that they appear order(basis) times. However, in many situations it may be desirable to","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"repeat other knots than the first and last or\nhave the first and/or last knot repeated less than k times (e.g. to implement certain boundary conditions).","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"In order to have repeated interior knots, it is sufficient to include it in the breakpoint vector multiple times when constructing the basis:","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"basis = BSplineBasis(3, [1, 2, 3, 4, 5, 5, 6, 7, 8]) # 5 appears twice\nknots(basis)","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"There is currently no way to create a BSplineBasis where the first and last knots appear less than k times. However, some functions provided by this package (see Higher-level functions) provide a indices keyword argument to select only a certain range of B-splines from a basis, thus achieving the same result as if the knot vector had been shortened.","category":"page"},{"location":"basis/#","page":"The BSplineBasis type","title":"The BSplineBasis type","text":"Because of repeated knots, not every pair of knots (t[i], t[i+1]) describes an actual interval. The intervalindices helps with finding all indices which describe relevant intervals. See its docstrings for more information.","category":"page"},{"location":"plotting/#Plotting-1","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"This package defines plot recipes for use with Plots.jl.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"compat: Compat\nSome of the plot recipes require at least RecipesBase 0.6, which requires at least Julia 1.0.","category":"page"},{"location":"plotting/#Plotting-a-BSplineBasis-1","page":"Plotting","title":"Plotting a BSplineBasis","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"A B-spline basis can be plotted by passing it to the Plots.plot function:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"basis = BSplineBasis(4, 0:5)\nplot(basis)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: Plot of a B-spline basis)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"By default, each B-spline is drawn with 100 samples. The number of samples can be changed with an optional argument, i.e., plot(basis, 5) will plot each B-spline with only 5 samples.","category":"page"},{"location":"plotting/#Plotting-Splines-and-their-derivatives-1","page":"Plotting","title":"Plotting Splines and their derivatives","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Splines can be plotted like functions:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"basis = BSpline(4, 0:5)\nspl = approximate(sin, basis)\nplot(1:5, spl)  # evaluate spl on the points 1:5 and plot it\nplot(spl, 1, 3) # plot spl from 1 to 3\nplot(spl)       # plot spl from 0 to 5 (its support)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"To plot a spline together with a Function, it needs to be of a Function type. For this purpose, a Function constructor is provided that wraps a Spline into a Function object.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot([sin, Function(spl)], 0, 5, label=[\"exact\" \"spline approximation\"])","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: Plot of a sine function and its spline approximation)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"The Function wrapper can also be used to plot the derivatives of a spline via an optional argument:","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"f1 = Function(spl)\nf2 = Function(spl, Derivative(1))\nf3 = Function(spl, Derivative(2))\nf4 = Function(spl, Derivative(3))\nplot([f1, f2, f3, f4])","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: Plot of a spline and its derivatives)","category":"page"},{"location":"#BSplines.jl-1","page":"Home","title":"BSplines.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package provides data types and functions for working with B-splines as a means to approximate real functions.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package is compatible with Julia ≥ 0.7. It is currently not registered and can be installed by typing","category":"page"},{"location":"#","page":"Home","title":"Home","text":"] add https://github.com/sostock/BSplines.jl","category":"page"},{"location":"#","page":"Home","title":"Home","text":"in the Julia REPL.","category":"page"},{"location":"#Acknowledgments-1","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The algorithms used for evaluating B-splines (and their derivatives) are adapted from  the Fortran code found in Carl de Boor’s book A practical Guide to Splines [deBoor1978], in particular from the subroutines BSPLVB, BSPLVD and BVALUE.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[deBoor1978]: Carl de Boor, A Practical Guide to Splines, New York, N.Y.: Springer-Verlag, 1978.","category":"page"},{"location":"#Manual-outline-1","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"basis.md\", \"spline.md\", \"functions.md\", \"plotting.md\"]","category":"page"}]
}
